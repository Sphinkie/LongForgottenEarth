// ------------------------------------------------------------------------
// ------------------------------------------------------------------------
material Room2/rockwall_NH
{
   // Technique with vertex and fragment programs, supports coloured lights.
   technique
   {
      // do the lighting  and bump mapping with parallax pass
      // NB we don't do decal texture here because this is repeated per light
      pass
      {
         // Vertex program reference
         vertex_program_ref Examples/OffsetMappingVP
         {
            param_named_auto lightPosition light_position_object_space 0
            param_named_auto eyePosition camera_position_object_space
            param_named_auto worldViewProj worldviewproj_matrix
         }

         // Vertex program reference
         fragment_program_ref Examples/OffsetMappingPS
         {
            param_indexed_auto 0 light_diffuse_colour 0
            param_indexed_auto 1 light_specular_colour 0
            // Parallax Height scale and bias
            param_indexed 2 float4 0.04, -0.02, 1, 0
         }

         // Normalmap + heightmap(alpha)
         texture_unit
         {
            texture rockwall_NH.tga
            tex_coord_set 0
         }

         // Base diffuse texture map
         texture_unit
         {
            texture rockwall.tga
            tex_coord_set 1
         }
      }
   }
}


// ------------------------------------------------------------------------
// ------------------------------------------------------------------------
material Room2/hull
{
    technique
    {
        pass
        {
            lighting on
            ambient 0.1 0.1 0.1
            texture_unit
            {
                texture hull.jpg
            }
        }
    }
}

material Room2/Steel
{
    technique
    {
        pass
        {
            ambient 0.1 0.1 0.1
            lighting on
            texture_unit
            {
                texture Stainless_Steel.jpg
            }
        }
    }
}

material Room2/ground
{
    technique
    {
        pass
        {
            ambient 0.82353 0.82353 0.82353
            diffuse 0.82353 0.82353 0.82353
            specular 0 0 0 0
            emissive 0 0 0
            lighting on
            texture_unit
            {
                texture ground.jpg
            }
        }
    }
}

material Room2/light
{
    technique
    {
        pass
        {
            ambient  0 0 0
            diffuse  1 1 1
			emissive 0.55 0.94 0.94
        }
    }
}

// ------------------------------------------------------------------------
// Material avec Normal Map.  
// Plusieurs Techniques sont definies. Ogre selectionne la plus adaptée à la carte graphique.
// ------------------------------------------------------------------------
material Room2/wall_NM
{
   // Technique with vertex and fragment programs, supports coloured lights.
   // OK for Gforce6600.
   technique
   {
      // do the lighting and bump mapping with parallax pass
      // NB we don't do decal texture here because this is repeated per light
      pass
      {
         // Vertex program reference
         vertex_program_ref Examples/OffsetMappingVP
         {
            param_named_auto lightPosition light_position_object_space 0
            param_named_auto eyePosition camera_position_object_space
            param_named_auto worldViewProj worldviewproj_matrix
         }

         // Fragment program reference
         fragment_program_ref Examples/OffsetMappingFP
         {
            param_named_auto lightDiffuse light_diffuse_colour 0
            param_named_auto lightSpecular light_specular_colour 0
            // Parallax Height scale and bias
            param_named scaleBias float4 0.04, -0.02, 1, 0
         }

         // Normal + height(alpha) map
         texture_unit
         {
            texture wall_NM.tga
            tex_coord_set 0
         }

         // Base diffuse texture map
         texture_unit
         {
            texture Stainless_Steel.jpg
            tex_coord_set 1
         }
      }
   }


   // Technique with vertex and assembler programs, supports coloured lights.
   // For videocards without Paralax Fragment Program
   technique
   {
      // do the lighting  and bump mapping with parallax pass
      // NB we don't do decal texture here because this is repeated per light
      pass
      {
         // Vertex program reference
         vertex_program_ref Examples/OffsetMappingVP
         {
            param_named_auto lightPosition light_position_object_space 0
            param_named_auto eyePosition camera_position_object_space
            param_named_auto worldViewProj worldviewproj_matrix
         }

         // Fragment program reference
         fragment_program_ref Examples/OffsetMappingPS
         {
            param_indexed_auto 0 light_diffuse_colour 0
            param_indexed_auto 1 light_specular_colour 0
            // Parallax Height scale and bias
            param_indexed 2 float4 0.04, -0.02, 1, 0
         }

         // Normal + height(alpha) map
         texture_unit
         {
            texture wall_NM.tga
            tex_coord_set 0
         }

         // Base diffuse texture map
         texture_unit
         {
            texture Stainless_Steel.jpg
            tex_coord_set 1
         }
      }
   }
}

